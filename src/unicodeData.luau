-- upstream: https://github.com/rust-lang/rust/blob/3628a8f326d1f323832aeae742ab3bbd025e4166/library/core/src/unicode/unicode_data.rs

local slice = require('./slice')

local binarySeachByKey = slice.binarySeachByKey

local function bitsetSearch(
    needle: number,
    chunkIdxMap: { number },
    bitsetChunkIdx: { { number } },
    bitsetCanonical: { { number } },
    bitsetCanonicalized: { { number } }
): boolean
    local CHUNK_SIZE = #bitsetChunkIdx[1]

    local bucketIdx = math.floor(needle / 64)
    local chunkMapIdx = math.floor(bucketIdx / CHUNK_SIZE)
    local chunkPiece = bucketIdx % CHUNK_SIZE

    local chunkIdx
    if chunkMapIdx < #chunkIdxMap then
        chunkIdx = chunkIdxMap[chunkMapIdx + 1]
    else
        return false
    end

    local idx = bitsetChunkIdx[chunkIdx + 1][chunkPiece + 1]

    local word
    if idx < #bitsetCanonical then
        word = bitsetCanonical[idx + 1]
    else
        local pair = bitsetCanonicalized[idx - #bitsetCanonical + 1]
        local realIdx = pair[1]
        local mapping = pair[2]
        word = bitsetCanonical[realIdx + 1]

        local shouldInvert = bit32.band(mapping, bit32.lshift(1, 6)) ~= 0
        if shouldInvert then
            word = { bit32.bnot(word[1]), bit32.bnot(word[2]) }
        end

        -- Lower 6 bits
        local quantity = bit32.band(mapping, bit32.lshift(1, 6) - 1)
        if bit32.band(mapping, bit32.lshift(1, 7)) ~= 0 then
            -- deviation: accommodate for word which is pair of 32 bit integers
            -- instead of a single 64 bit integer
            -- word = bit32.rshift(word, quantity)
            if quantity >= 32 then
                word = { 0, bit32.rshift(word[1], quantity - 32) }
            else
                local highBits = bit32.lshift(word[1], 32 - quantity)
                word = {
                    bit32.rshift(word[1], quantity),
                    bit32.bor(bit32.rshift(word[2], quantity), highBits),
                }
            end
        else
            -- deviation: accommodate for word which is pair of 32 bit integers
            -- instead of a single 64 bit integer
            -- word = bit32.lrotate(word, quantity)
            if quantity == 32 then
                word = { word[2], word[1] }
            else
                if quantity > 32 then
                    quantity = quantity - 32
                    word = { word[2], word[1] }
                end
                local rotatedBits = bit32.rshift(word[1], 32 - quantity)
                local shiftedBits = bit32.rshift(word[2], 32 - quantity)
                word = {
                    bit32.bor(bit32.lshift(word[1], quantity), shiftedBits),
                    bit32.bor(bit32.lshift(word[2], quantity), rotatedBits),
                }
            end
        end
    end

    -- deviation: accommodate for word which is pair of 32 bit integers
    -- instead of a single 64 bit integer
    -- return bit32.band(word, bit32.lshift(1, needle % 64)) ~= 0
    local needlePosition = needle % 64
    if needlePosition < 32 then
        return bit32.band(word[2], bit32.lshift(1, needlePosition)) ~= 0
    else
        return bit32.band(word[1], bit32.lshift(1, needlePosition - 32)) ~= 0
    end
end

local function newShortOffsetRunHeader(startIndex: number, prefixSum: number): number
    return bit32.bor(bit32.lshift(startIndex, 21), prefixSum)
end

local function shortOffsetRunHeaderStartIndex(value: number): number
    return bit32.rshift(value, 21)
end

local function shortOffsetRunHeaderPrefixSum(value: number): number
    return bit32.band(value, bit32.lshift(1, 21) - 1)
end

local function skipSearch(needle: string, shortOffsetRuns: { number }, offsets: { number }): boolean
    local needle = utf8.codepoint(needle)

    local search = binarySeachByKey(shortOffsetRuns, bit32.lshift(needle, 11), function(value)
        return bit32.lshift(value, 11)
    end)

    local lastIdx = search.index + if search.ok then 1 else 0

    -- Get offset index and length
    local offsetIdx = shortOffsetRunHeaderStartIndex(shortOffsetRuns[lastIdx])

    local length

    local next = shortOffsetRuns[lastIdx + 1]
    if next then
        length = shortOffsetRunHeaderStartIndex(next) - offsetIdx
    else
        length = #offsets - offsetIdx
    end

    local prev = if lastIdx > 1
        then shortOffsetRunHeaderPrefixSum(shortOffsetRuns[lastIdx - 1])
        else 0

    local total = needle - prev
    local prefixSum = 0

    -- deviation: start at 1 for Luau 1-indexing
    for _ = 1, length - 1 do
        -- deviation: add 1 for Luau 1-indexing
        local offset = offsets[offsetIdx + 1]
        prefixSum += offset
        if prefixSum > total then
            break
        end
        offsetIdx += 1
    end

    return offsetIdx % 2 == 1
end

local alphabetic = {}
do
    local SHORT_OFFSET_RUNS = {
        newShortOffsetRunHeader(0, 706),
        newShortOffsetRunHeader(16, 4681),
        newShortOffsetRunHeader(418, 5741),
        newShortOffsetRunHeader(456, 7958),
        newShortOffsetRunHeader(556, 9398),
        newShortOffsetRunHeader(627, 11264),
        newShortOffsetRunHeader(629, 12293),
        newShortOffsetRunHeader(667, 13312),
        newShortOffsetRunHeader(691, 19904),
        newShortOffsetRunHeader(692, 42125),
        newShortOffsetRunHeader(694, 42509),
        newShortOffsetRunHeader(698, 55204),
        newShortOffsetRunHeader(788, 63744),
        newShortOffsetRunHeader(793, 64110),
        newShortOffsetRunHeader(794, 64830),
        newShortOffsetRunHeader(816, 66176),
        newShortOffsetRunHeader(857, 67383),
        newShortOffsetRunHeader(904, 73440),
        newShortOffsetRunHeader(1221, 74650),
        newShortOffsetRunHeader(1232, 77712),
        newShortOffsetRunHeader(1237, 78896),
        newShortOffsetRunHeader(1240, 82939),
        newShortOffsetRunHeader(1244, 83527),
        newShortOffsetRunHeader(1246, 90368),
        newShortOffsetRunHeader(1247, 92160),
        newShortOffsetRunHeader(1249, 92729),
        newShortOffsetRunHeader(1250, 93504),
        newShortOffsetRunHeader(1265, 100344),
        newShortOffsetRunHeader(1282, 101590),
        newShortOffsetRunHeader(1284, 110576),
        newShortOffsetRunHeader(1287, 110883),
        newShortOffsetRunHeader(1294, 111356),
        newShortOffsetRunHeader(1304, 113664),
        newShortOffsetRunHeader(1305, 119808),
        newShortOffsetRunHeader(1315, 120486),
        newShortOffsetRunHeader(1352, 122624),
        newShortOffsetRunHeader(1375, 123536),
        newShortOffsetRunHeader(1399, 124112),
        newShortOffsetRunHeader(1403, 124896),
        newShortOffsetRunHeader(1409, 126464),
        newShortOffsetRunHeader(1425, 127280),
        newShortOffsetRunHeader(1491, 131072),
        newShortOffsetRunHeader(1497, 173792),
        newShortOffsetRunHeader(1498, 177978),
        newShortOffsetRunHeader(1500, 183970),
        newShortOffsetRunHeader(1504, 191457),
        newShortOffsetRunHeader(1506, 192094),
        newShortOffsetRunHeader(1508, 194560),
        newShortOffsetRunHeader(1509, 195102),
        newShortOffsetRunHeader(1510, 196608),
        newShortOffsetRunHeader(1511, 201547),
        newShortOffsetRunHeader(1512, 205744),
        newShortOffsetRunHeader(1514, 1319856),
    }

    -- stylua: ignore
    local OFFSETS = {
        65, 26, 6, 26, 47, 1, 10, 1, 4, 1, 5, 23, 1, 31, 1, 0, 4, 12, 14, 5, 7, 1, 1, 1, 86, 1, 29,
        18, 1, 2, 2, 4, 1, 1, 6, 1, 1, 3, 1, 1, 1, 20, 1, 83, 1, 139, 8, 166, 1, 38, 2, 1, 6, 41,
        39, 14, 1, 1, 1, 2, 1, 2, 1, 1, 8, 27, 4, 4, 29, 11, 5, 56, 1, 7, 14, 102, 1, 8, 4, 8, 4, 3,
        10, 3, 2, 1, 16, 48, 13, 101, 24, 33, 9, 2, 4, 1, 5, 24, 2, 19, 19, 25, 7, 11, 5, 24, 1, 6,
        8, 1, 8, 42, 10, 12, 3, 7, 6, 76, 1, 16, 1, 3, 4, 15, 13, 19, 1, 8, 2, 2, 2, 22, 1, 7, 1, 1,
        3, 4, 3, 8, 2, 2, 2, 2, 1, 1, 8, 1, 4, 2, 1, 5, 12, 2, 10, 1, 4, 3, 1, 6, 4, 2, 2, 22, 1, 7,
        1, 2, 1, 2, 1, 2, 4, 5, 4, 2, 2, 2, 4, 1, 7, 4, 1, 1, 17, 6, 11, 3, 1, 9, 1, 3, 1, 22, 1, 7,
        1, 2, 1, 5, 3, 9, 1, 3, 1, 2, 3, 1, 15, 4, 21, 4, 4, 3, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5,
        3, 8, 2, 2, 2, 2, 9, 2, 4, 2, 1, 5, 13, 1, 16, 2, 1, 6, 3, 3, 1, 4, 3, 2, 1, 1, 1, 2, 3, 2,
        3, 3, 3, 12, 4, 5, 3, 3, 1, 3, 3, 1, 6, 1, 40, 13, 1, 3, 1, 23, 1, 16, 3, 8, 1, 3, 1, 3, 8,
        2, 1, 3, 2, 1, 2, 4, 28, 4, 1, 8, 1, 3, 1, 23, 1, 10, 1, 5, 3, 8, 1, 3, 1, 3, 8, 2, 6, 2, 1,
        4, 13, 3, 12, 13, 1, 3, 1, 41, 2, 8, 1, 3, 1, 3, 1, 1, 5, 4, 7, 5, 22, 6, 1, 3, 1, 18, 3,
        24, 1, 9, 1, 1, 2, 7, 8, 6, 1, 1, 1, 8, 18, 2, 13, 58, 5, 7, 6, 1, 51, 2, 1, 1, 1, 5, 1, 24,
        1, 1, 1, 19, 1, 3, 2, 5, 1, 1, 6, 1, 14, 4, 32, 1, 63, 8, 1, 36, 4, 19, 4, 16, 1, 36, 67,
        55, 1, 1, 2, 5, 16, 64, 10, 4, 2, 38, 1, 1, 5, 1, 2, 43, 1, 0, 1, 4, 2, 7, 1, 1, 1, 4, 2,
        41, 1, 4, 2, 33, 1, 4, 2, 7, 1, 1, 1, 4, 2, 15, 1, 57, 1, 4, 2, 67, 37, 16, 16, 86, 2, 6, 3,
        0, 2, 17, 1, 26, 5, 75, 3, 11, 7, 20, 11, 21, 12, 20, 12, 13, 1, 3, 1, 2, 12, 52, 2, 19, 14,
        1, 4, 1, 67, 89, 7, 43, 5, 70, 10, 31, 1, 12, 4, 9, 23, 30, 2, 5, 11, 44, 4, 26, 54, 28, 4,
        63, 2, 20, 50, 1, 23, 2, 11, 3, 49, 52, 1, 15, 1, 8, 51, 42, 2, 4, 10, 44, 1, 11, 14, 55,
        22, 3, 10, 36, 2, 11, 5, 43, 2, 3, 41, 4, 1, 6, 1, 2, 3, 1, 5, 192, 19, 34, 11, 0, 2, 6, 2,
        38, 2, 6, 2, 8, 1, 1, 1, 1, 1, 1, 1, 31, 2, 53, 1, 7, 1, 1, 3, 3, 1, 7, 3, 4, 2, 6, 4, 13,
        5, 3, 1, 7, 116, 1, 13, 1, 16, 13, 101, 1, 4, 1, 2, 10, 1, 1, 3, 5, 6, 1, 1, 1, 1, 1, 1, 4,
        1, 11, 2, 4, 5, 5, 4, 1, 17, 41, 0, 52, 0, 229, 6, 4, 3, 2, 12, 38, 1, 1, 5, 1, 2, 56, 7, 1,
        16, 23, 9, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 32, 47, 1, 0, 3, 25, 9, 7, 5, 2,
        5, 4, 86, 6, 3, 1, 90, 1, 4, 5, 43, 1, 94, 17, 32, 48, 16, 0, 0, 64, 0, 67, 46, 2, 0, 3, 16,
        10, 2, 20, 47, 5, 8, 3, 113, 39, 9, 2, 103, 2, 67, 2, 2, 1, 1, 1, 8, 21, 20, 1, 33, 24, 52,
        12, 68, 1, 1, 44, 6, 3, 1, 1, 3, 10, 33, 5, 35, 13, 29, 3, 51, 1, 12, 15, 1, 16, 16, 10, 5,
        1, 55, 9, 14, 18, 23, 3, 69, 1, 1, 1, 1, 24, 3, 2, 16, 2, 4, 11, 6, 2, 6, 2, 6, 9, 7, 1, 7,
        1, 43, 1, 14, 6, 123, 21, 0, 12, 23, 4, 49, 0, 0, 2, 106, 38, 7, 12, 5, 5, 12, 1, 13, 1, 5,
        1, 1, 1, 2, 1, 2, 1, 108, 33, 0, 18, 64, 2, 54, 40, 12, 116, 5, 1, 135, 36, 26, 6, 26, 11,
        89, 3, 6, 2, 6, 2, 6, 2, 3, 35, 12, 1, 26, 1, 19, 1, 2, 1, 15, 2, 14, 34, 123, 69, 53, 0,
        29, 3, 49, 47, 32, 13, 30, 5, 43, 5, 30, 2, 36, 4, 8, 1, 5, 42, 158, 18, 36, 4, 36, 4, 40,
        8, 52, 12, 11, 1, 15, 1, 7, 1, 2, 1, 11, 1, 15, 1, 7, 1, 2, 3, 52, 12, 0, 9, 22, 10, 8, 24,
        6, 1, 42, 1, 9, 69, 6, 2, 1, 1, 44, 1, 2, 3, 1, 2, 23, 10, 23, 9, 31, 65, 19, 1, 2, 10, 22,
        10, 26, 70, 56, 6, 2, 64, 4, 1, 2, 5, 8, 1, 3, 1, 29, 42, 29, 3, 29, 35, 8, 1, 28, 27, 54,
        10, 22, 10, 19, 13, 18, 110, 73, 55, 51, 13, 51, 13, 40, 34, 28, 3, 1, 5, 23, 250, 42, 1, 2,
        3, 2, 16, 3, 55, 1, 3, 29, 10, 1, 8, 22, 42, 18, 46, 21, 27, 23, 9, 70, 43, 5, 10, 57, 9, 1,
        13, 25, 23, 51, 17, 4, 8, 35, 3, 1, 9, 64, 1, 4, 9, 2, 10, 1, 1, 1, 35, 18, 1, 34, 2, 1, 6,
        4, 62, 7, 1, 1, 1, 4, 1, 15, 1, 10, 7, 57, 23, 4, 1, 8, 2, 2, 2, 22, 1, 7, 1, 2, 1, 5, 3, 8,
        2, 2, 2, 2, 3, 1, 6, 1, 5, 7, 28, 10, 1, 1, 2, 1, 1, 38, 1, 10, 1, 1, 2, 1, 1, 4, 1, 2, 3,
        1, 1, 1, 44, 66, 1, 3, 1, 4, 20, 3, 30, 66, 2, 2, 1, 1, 184, 54, 2, 7, 25, 6, 34, 63, 1, 1,
        3, 1, 59, 54, 2, 1, 71, 27, 2, 14, 21, 7, 185, 57, 103, 64, 31, 8, 2, 1, 2, 8, 1, 2, 1, 30,
        1, 2, 2, 2, 2, 4, 93, 8, 2, 46, 2, 6, 1, 1, 1, 2, 27, 51, 2, 10, 17, 72, 5, 1, 18, 73, 199,
        33, 31, 9, 1, 45, 1, 7, 1, 1, 49, 30, 2, 22, 1, 14, 73, 7, 1, 2, 1, 44, 3, 1, 1, 2, 1, 3, 1,
        1, 2, 2, 24, 6, 1, 2, 1, 37, 1, 2, 1, 4, 1, 1, 0, 23, 9, 17, 1, 41, 3, 3, 111, 1, 79, 0,
        102, 111, 17, 196, 0, 97, 15, 0, 17, 6, 25, 0, 5, 0, 0, 47, 0, 0, 7, 31, 17, 79, 17, 30, 18,
        48, 16, 4, 31, 21, 5, 19, 0, 45, 211, 64, 128, 75, 4, 57, 7, 17, 64, 2, 1, 1, 12, 2, 14, 0,
        8, 0, 41, 10, 0, 4, 1, 7, 1, 2, 1, 0, 15, 1, 29, 3, 2, 1, 14, 4, 8, 0, 0, 107, 5, 13, 3, 9,
        7, 10, 4, 1, 0, 85, 1, 71, 1, 2, 2, 1, 2, 2, 2, 4, 1, 12, 1, 1, 1, 7, 1, 65, 1, 4, 2, 8, 1,
        7, 1, 28, 1, 4, 1, 5, 1, 1, 3, 7, 1, 0, 2, 25, 1, 25, 1, 31, 1, 25, 1, 31, 1, 25, 1, 31, 1,
        25, 1, 31, 1, 25, 1, 8, 0, 31, 6, 6, 213, 7, 1, 17, 2, 7, 1, 2, 1, 5, 5, 62, 33, 1, 112, 45,
        10, 7, 16, 1, 0, 30, 18, 44, 0, 28, 228, 30, 2, 1, 0, 7, 1, 4, 1, 2, 1, 15, 1, 197, 59, 68,
        3, 1, 3, 1, 0, 4, 1, 27, 1, 2, 1, 1, 2, 1, 1, 10, 1, 4, 1, 1, 1, 1, 6, 1, 4, 1, 1, 1, 1, 1,
        1, 3, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 4, 1, 7, 1, 4, 1, 4, 1, 1, 1,
        10, 1, 17, 5, 3, 1, 5, 1, 17, 0, 26, 6, 26, 6, 26, 0, 0, 32, 0, 6, 222, 2, 0, 14, 0, 15, 0,
        0, 0, 0, 0, 5, 0, 0,
    }

    function alphabetic.lookup(c: string): boolean
        return skipSearch(c, SHORT_OFFSET_RUNS, OFFSETS)
    end
end

local cc = {}
do
    local SHORT_OFFSET_RUNS = {
        newShortOffsetRunHeader(0, 1114272),
    }
    -- stylua: ignore
    local OFFSETS = {
        0, 32, 95, 33, 0,
    }
    function cc.lookup(c: string): boolean
        return skipSearch(c, SHORT_OFFSET_RUNS, OFFSETS)
    end
end

-- deviation: skip grapheme_extend

local lowercase = {}
do
    -- stylua: ignore
    local BITSET_CHUNKS_MAP = {
        14, 17, 0, 0, 9, 0, 0, 12, 13, 10, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 4, 1, 0, 15, 0, 8, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        3, 18, 0, 7,
    }
    -- stylua: ignore
    local BITSET_INDEX_CHUNKS = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 14, 56, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 43, 0, 52, 48, 50, 33},
        {0, 0, 0, 0, 10, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 3, 0, 16, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27},
        {0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 46, 0, 56, 56, 56, 0, 22, 22, 69, 22, 36, 25, 24, 37},
        {0, 5, 70, 0, 29, 15, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 66, 34, 17, 23, 53, 54, 49, 47, 8, 35, 42, 0, 28, 13, 31},
        {11, 60, 0, 6, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 32, 0},
        {16, 26, 22, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {16, 51, 2, 21, 68, 9, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {16, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {65, 41, 55, 12, 77, 63, 18, 1, 7, 64, 76, 20, 73, 74, 4, 45},
    }
    -- stylua: ignore
    local BITSET_CANONICAL = {
        {0b00000000000000000000000000000000, 0b00000000000000000000000000000000},
        {0b11111111111111111100000000000000, 0b00000000000011111111111111111111},
        {0b10101010101010101010101010101010, 0b10101010101010101010100000000010},
        {0b00000000000001111111111111111111, 0b11111111111111111111111111111111},
        {0b11111111111111111111110000000000, 0b00000000000000001111110111111111},
        {0b10000000000000100000000000000000, 0b00000000000000000000000000000000},
        {0b00001111111111111111111111111111, 0b11111111000000000000000000000000},
        {0b00001111111111111111111111111100, 0b00000000000000000000000011111111},
        {0b11111111111111111111111111111111, 0b11111111111111111010101010000101},
        {0b11111111111111111111111111111111, 0b00000000000000000000000000000000},
        {0b11111111111111111111111111111100, 0b00000000000000000000000000000000},
        {0b11111111111111111111111100000000, 0b00000000000000000000000000000000},
        {0b11111111111111111111110000000000, 0b00000000000000001111111111101111},
        {0b11111111111111111111000000000000, 0b00000000000000010000000000000000},
        {0b11111111111111110000001111111111, 0b11110111111111111111111111111111},
        {0b11111111111111110000000000000000, 0b00000000000000000100001111000000},
        {0b11111111111111110000000000000000, 0b00000000000000000000000000000000},
        {0b11111111011111111111111111111111, 0b10000000000000000000000000000000},
        {0b11111100000000000000000000000000, 0b11111111111111111111111111000000},
        {0b11110111111111111111111111111111, 0b11111111111111110000000000000000},
        {0b11110000000000000000000000000011, 0b11110111111111111111111111111100},
        {0b10101010101010101010101010101010, 0b10101010101010101101010101010100},
        {0b10101010101010101010101010101010, 0b10101010101010101010101010101010},
        {0b01010101101010101010101010101010, 0b10101010101010101010101010101010},
        {0b01000000110111110000000011111111, 0b00000000111111110000000011111111},
        {0b00111111111111110000000011111111, 0b00000000111111110000000000111111},
        {0b00111111110110100001010101100010, 0b11111111111111111111111111111111},
        {0b00111111000000000000000000000000, 0b00000000000000000000000000000000},
        {0b00111100100010100000000000000000, 0b00000000000000000000000000100000},
        {0b00110010000100001000000000000000, 0b00000000000010001100010000000000},
        {0b00011011111110111111111111111011, 0b11111111100000000000000000000000},
        {0b00011001001011111010101010101010, 0b10101010111000110111111111111111},
        {0b00000111111111011111111111111111, 0b11111111111111111111111110111001},
        {0b00000111010111000000000000000000, 0b00001010101010100010010100001010},
        {0b00000100001000000000010000000000, 0b00000000000000000000000000000000},
        {0b00000001111111111111111111111111, 0b11111111111011111111111111111111},
        {0b00000000111111110000000011111111, 0b00000000001111110000000011111111},
        {0b00000000110111000000000011111111, 0b00000000110011110000000011011100},
        {0b00000000000010000101000000011010, 0b10101010101010101010101010101010},
        {0b00000000000000000010000010111111, 0b11111111111111111111111111111111},
        {0b00000000000000000000011111100000, 0b01111111111111111111101111111111},
        {0b00000000000000000000000011111111, 0b11111111110111111100000000000000},
        {0b00000000000000000000000000011111, 0b00000000000000000000000000000011},
        {0b00000000000000000000000000000000, 0b00111010101010101010101010101010},
        {0b00000000000000000000000000000000, 0b00000000111110000000000001111111},
        {0b00000000000000000000000000000000, 0b00000000000000000000101111110111},
        {0b00000000000000000000000000000000, 0b00000000000000000000010111111111},
        {0b10010011111110101010101010101010, 0b10101010101010101010101010101010},
        {0b10010101111111111010101010101010, 0b10101010101010101010101010101010},
        {0b10101010001010011010101010101010, 0b10110101010101010101001001000000},
        {0b10101010101000001000001010101010, 0b10101010101110100101000010101010},
        {0b10101010101010101010101010101010, 0b11111111111111111111111111111111},
        {0b10101010101010111010101010101000, 0b00000000000000000000000000000000},
        {0b11010100101010101010101010101010, 0b10101010101010101010101101010101},
        {0b11100110010100010010110100101010, 0b01001110001001000011000100101001},
        {0b11101011110000000000000000000000, 0b00001111111111111111111111111100},
    }
    -- stylua: ignore
    local BITSET_MAPPING = {
        {0, 64}, {1, 188}, {1, 186}, {1, 183}, {1, 176}, {1, 109}, {1, 124}, {1, 126}, {1, 66},
        {1, 70}, {1, 77}, {2, 146}, {2, 144}, {2, 83}, {3, 93}, {3, 147}, {3, 133}, {4, 12}, {4, 6},
        {5, 187}, {6, 78}, {7, 132},
    }

    function lowercase.lookup(c: string): boolean
        local char = utf8.codepoint(c)

        return bitsetSearch(
            char,
            BITSET_CHUNKS_MAP,
            BITSET_INDEX_CHUNKS,
            BITSET_CANONICAL,
            BITSET_MAPPING
        )
    end
end

local n = {}
do
    -- stylua: ignore
    local SHORT_OFFSET_RUNS = {
        newShortOffsetRunHeader(0, 1632), newShortOffsetRunHeader(9, 2406),
        newShortOffsetRunHeader(15, 4160), newShortOffsetRunHeader(49, 4969),
        newShortOffsetRunHeader(53, 5870), newShortOffsetRunHeader(55, 6470),
        newShortOffsetRunHeader(63, 8304), newShortOffsetRunHeader(79, 9312),
        newShortOffsetRunHeader(89, 10102), newShortOffsetRunHeader(93, 11517),
        newShortOffsetRunHeader(95, 12295), newShortOffsetRunHeader(97, 12690),
        newShortOffsetRunHeader(103, 42528), newShortOffsetRunHeader(115, 43056),
        newShortOffsetRunHeader(119, 44016), newShortOffsetRunHeader(131, 65296),
        newShortOffsetRunHeader(133, 65799), newShortOffsetRunHeader(135, 66273),
        newShortOffsetRunHeader(141, 67672), newShortOffsetRunHeader(153, 68858),
        newShortOffsetRunHeader(183, 69216), newShortOffsetRunHeader(189, 70736),
        newShortOffsetRunHeader(209, 71248), newShortOffsetRunHeader(213, 71904),
        newShortOffsetRunHeader(221, 72688), newShortOffsetRunHeader(225, 73552),
        newShortOffsetRunHeader(233, 74752), newShortOffsetRunHeader(237, 90416),
        newShortOffsetRunHeader(239, 92768), newShortOffsetRunHeader(241, 93552),
        newShortOffsetRunHeader(249, 93824), newShortOffsetRunHeader(251, 118000),
        newShortOffsetRunHeader(253, 119488), newShortOffsetRunHeader(255, 120782),
        newShortOffsetRunHeader(261, 123200), newShortOffsetRunHeader(263, 123632),
        newShortOffsetRunHeader(265, 124144), newShortOffsetRunHeader(267, 125127),
        newShortOffsetRunHeader(271, 126065), newShortOffsetRunHeader(275, 127232),
        newShortOffsetRunHeader(285, 130032), newShortOffsetRunHeader(287, 1244154),
    }
    -- stylua: ignore
    local OFFSETS = {
        48, 10, 120, 2, 5, 1, 2, 3, 0, 10, 134, 10, 198, 10, 0, 10, 118, 10, 4, 6, 108, 10, 118,
        10, 118, 10, 2, 6, 110, 13, 115, 10, 8, 7, 103, 10, 104, 7, 7, 19, 109, 10, 96, 10, 118, 10,
        70, 20, 0, 10, 70, 10, 0, 20, 0, 3, 239, 10, 6, 10, 22, 10, 0, 10, 128, 11, 165, 10, 6, 10,
        182, 10, 86, 10, 134, 10, 6, 10, 0, 1, 3, 6, 6, 10, 198, 51, 2, 5, 0, 60, 78, 22, 0, 30, 0,
        1, 0, 1, 25, 9, 14, 3, 0, 4, 138, 10, 30, 8, 1, 15, 32, 10, 39, 15, 0, 10, 188, 10, 0, 6,
        154, 10, 38, 10, 198, 10, 22, 10, 86, 10, 0, 10, 0, 10, 0, 45, 12, 57, 17, 2, 0, 27, 36, 4,
        29, 1, 8, 1, 134, 5, 202, 10, 0, 8, 25, 7, 39, 9, 75, 5, 22, 6, 160, 2, 2, 16, 2, 46, 64, 9,
        52, 2, 30, 3, 75, 5, 104, 8, 24, 8, 41, 7, 0, 6, 48, 10, 6, 10, 0, 31, 158, 10, 42, 4, 112,
        7, 134, 30, 128, 10, 60, 10, 144, 10, 7, 20, 251, 10, 0, 10, 118, 10, 0, 10, 102, 10, 6, 20,
        76, 12, 0, 19, 93, 10, 0, 10, 86, 29, 227, 10, 70, 10, 0, 10, 102, 21, 0, 111, 0, 10, 0, 10,
        86, 10, 134, 10, 1, 7, 0, 10, 0, 23, 0, 10, 0, 20, 12, 20, 108, 25, 0, 50, 0, 10, 0, 10, 0,
        10, 247, 10, 0, 9, 128, 10, 0, 59, 1, 3, 1, 4, 76, 45, 1, 15, 0, 13, 0, 10, 0,
    }
    function n.lookup(c: string): boolean
        return skipSearch(c, SHORT_OFFSET_RUNS, OFFSETS)
    end
end

local uppercase = {}
do
    -- stylua: ignore
    local BITSET_CHUNKS_MAP = {
        12, 15, 6, 6, 0, 6, 6, 2, 4, 11, 6, 16, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 5, 6, 14, 6, 10, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13, 6, 6,
        6, 6, 9, 6, 3,
    }
    -- stylua: ignore
    local BITSET_INDEX_CHUNKS = {
        {44, 44, 5, 35, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 5, 1},
        {44, 44, 5, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 44, 40, 44, 44, 44, 44, 44, 17, 17, 63, 17, 43, 29, 24, 23},
        {44, 44, 44, 44, 9, 8, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 44, 44, 44, 37, 28, 67, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 0, 44, 44, 44},
        {44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 44, 44, 44, 44, 44, 44, 44, 44, 55, 44, 44, 44, 44, 44, 44},
        {44, 44, 44, 44, 44, 44, 44, 44, 44, 62, 61, 44, 20, 14, 16, 4},
        {44, 44, 44, 44, 56, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 44, 59, 44, 44, 31, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 44, 60, 46, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {44, 49, 44, 32, 36, 21, 22, 15, 13, 34, 44, 44, 44, 11, 30, 39},
        {52, 54, 26, 50, 12, 7, 25, 51, 41, 53, 6, 3, 66, 65, 64, 68},
        {57, 44, 9, 47, 44, 42, 33, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {58, 19, 2, 18, 10, 48, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
        {58, 38, 17, 27, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
    }
    -- stylua: ignore
    local BITSET_CANONICAL = {
        {0b00000111111111111111111111111110, 0b00000000000000000000000000000000},
        {0b00000000001111111111111111111111, 0b11111111111111111111111111111111},
        {0b01010101010101010101010101010101, 0b01010101010101010101010000000001},
        {0b00000111111111111111111111111100, 0b00000000000000000000000000000001},
        {0b00000000001000000000000000000000, 0b00010101010000010001101011110101},
        {0b11111111111111111111111111111111, 0b00000000000000000000000000000000},
        {0b11111111111111111111111100000000, 0b00000000000000000000001111111111},
        {0b11111111111111111111000000000000, 0b00000000000000011111110001011111},
        {0b11111111111111110000001111111111, 0b11111111111111110000001111111111},
        {0b11111111111111110000000000000000, 0b00000000000000000000000000000000},
        {0b11111111111111100101010101010101, 0b01010101010101010101010101010101},
        {0b10000000010001010000000000000000, 0b00000000000000000000000000000000},
        {0b01111011000000000000000000000000, 0b00011111110111111110011110110000},
        {0b01101100000001010101010101010101, 0b01010101010101010101010101010101},
        {0b01101010000000000101010101010101, 0b01010101010101010101010101010101},
        {0b01010101110100100101010101010101, 0b01001010101010101010010010010000},
        {0b01010101010111110111110101010101, 0b01010101010001010010100001010101},
        {0b01010101010101010101010101010101, 0b01010101010101010101010101010101},
        {0b01010101010101010101010101010101, 0b01010101010101010010101010101011},
        {0b01010101010101010101010101010101, 0b00000000000000000000000000000000},
        {0b01010101010101000101010101010100, 0b00000000000000000000000000000000},
        {0b00101011010101010101010101010101, 0b01010101010101010101010010101010},
        {0b00010001101011101101001011010101, 0b10110001110110111100111011010110},
        {0b00001111000000000001111100000000, 0b00001111000000000000111100000000},
        {0b00001111000000000000000000000000, 0b00000000000000000000000000000000},
        {0b00000011111111111111111111111111, 0b00000000000000000000000000111111},
        {0b00000000001111111101111001100100, 0b11010000000000000000000000000011},
        {0b00000000000001000010100000000101, 0b01010101010101010101010101010101},
        {0b00000000000000001111111111111111, 0b00000000000000000000000000100000},
        {0b00000000000000001111111100000000, 0b10101010000000000011111100000000},
        {0b00000000000000000000111111111011, 0b11111111111111101101011101000000},
        {0b00000000000000000000000000111111, 0b11111111111111110000000000000000},
        {0b00000000000000000000000000000000, 0b01111111011111111111111111111111},
        {0b00000000000000000000000000000000, 0b00000000001101111111011111111111},
        {0b00000000000000000000000000000000, 0b00000000000000000101010101111010},
        {0b00000000000000000000000000000000, 0b00000000000000000010000010111111},
        {0b10101010010101010101010101010101, 0b01010101010101010101010101010101},
        {0b11000000000011110011110101010000, 0b00111110001001110011100010000100},
        {0b11000000001001011110101010011101, 0b00000000000000000000000000000000},
        {0b11100110100100000101010101010101, 0b01010101000111001000000000000000},
        {0b11100111111111111111111111111111, 0b11111111111111110000001000000000},
        {0b11110000000000000000000000000011, 0b11111111111111111111111100000000},
        {0b11110111111111110000000000000000, 0b00000000000000000000000000000000},
        {0b11111111000000001111111100000000, 0b00111111000000001111111100000000},
    }

    -- stylua: ignore
    local BITSET_MAPPING = {
        {0, 187}, {0, 177}, {0, 171}, {0, 167}, {0, 164}, {0, 32}, {0, 47}, {0, 51}, {0, 121},
        {0, 117}, {0, 109}, {1, 150}, {1, 148}, {1, 142}, {1, 134}, {1, 131}, {1, 64}, {2, 164},
        {2, 146}, {2, 20}, {3, 146}, {3, 140}, {3, 134}, {4, 178}, {4, 171},
    }

    function uppercase.lookup(c: string): boolean
        local char = utf8.codepoint(c)

        return bitsetSearch(
            char,
            BITSET_CHUNKS_MAP,
            BITSET_INDEX_CHUNKS,
            BITSET_CANONICAL,
            BITSET_MAPPING
        )
    end
end

local whiteSpace = {}
do
    -- stylua: ignore
    local WHITESPACE_MAP = {
        2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0,
    }

    function whiteSpace.lookup(c: string): boolean
        local char = utf8.codepoint(c)

        local shifted = bit32.rshift(char, 8)

        if shifted == 0 then
            return bit32.band(WHITESPACE_MAP[bit32.band(char, 0xff) + 1], 1) ~= 0
        elseif shifted == 22 then
            return char == 0x1680
        elseif shifted == 32 then
            return bit32.band(WHITESPACE_MAP[bit32.band(char, 0xff) + 1], 2) ~= 0
        elseif shifted == 48 then
            return char == 0x3000
        end
        return false
    end
end

-- deviation: skip conversions

return {
    alphabetic = alphabetic,
    cc = cc,
    lowercase = lowercase,
    n = n,
    uppercase = uppercase,
    whiteSpace = whiteSpace,
}
